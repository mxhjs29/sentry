// Generated by gencpp from file mycar_description/odom.msg
// DO NOT EDIT!


#ifndef MYCAR_DESCRIPTION_MESSAGE_ODOM_H
#define MYCAR_DESCRIPTION_MESSAGE_ODOM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mycar_description
{
template <class ContainerAllocator>
struct odom_
{
  typedef odom_<ContainerAllocator> Type;

  odom_()
    : header()
    , child_frame_id()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , linear_x(0.0)
    , linear_y(0.0)
    , linear_z(0.0)
    , angular_x(0.0)
    , angular_y(0.0)
    , angular_z(0.0)  {
    }
  odom_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , linear_x(0.0)
    , linear_y(0.0)
    , linear_z(0.0)
    , angular_x(0.0)
    , angular_y(0.0)
    , angular_z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _qx_type;
  _qx_type qx;

   typedef double _qy_type;
  _qy_type qy;

   typedef double _qz_type;
  _qz_type qz;

   typedef double _linear_x_type;
  _linear_x_type linear_x;

   typedef double _linear_y_type;
  _linear_y_type linear_y;

   typedef double _linear_z_type;
  _linear_z_type linear_z;

   typedef double _angular_x_type;
  _angular_x_type angular_x;

   typedef double _angular_y_type;
  _angular_y_type angular_y;

   typedef double _angular_z_type;
  _angular_z_type angular_z;





  typedef boost::shared_ptr< ::mycar_description::odom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mycar_description::odom_<ContainerAllocator> const> ConstPtr;

}; // struct odom_

typedef ::mycar_description::odom_<std::allocator<void> > odom;

typedef boost::shared_ptr< ::mycar_description::odom > odomPtr;
typedef boost::shared_ptr< ::mycar_description::odom const> odomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mycar_description::odom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mycar_description::odom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mycar_description::odom_<ContainerAllocator1> & lhs, const ::mycar_description::odom_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.child_frame_id == rhs.child_frame_id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.qx == rhs.qx &&
    lhs.qy == rhs.qy &&
    lhs.qz == rhs.qz &&
    lhs.linear_x == rhs.linear_x &&
    lhs.linear_y == rhs.linear_y &&
    lhs.linear_z == rhs.linear_z &&
    lhs.angular_x == rhs.angular_x &&
    lhs.angular_y == rhs.angular_y &&
    lhs.angular_z == rhs.angular_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mycar_description::odom_<ContainerAllocator1> & lhs, const ::mycar_description::odom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mycar_description

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mycar_description::odom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mycar_description::odom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mycar_description::odom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mycar_description::odom_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mycar_description::odom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mycar_description::odom_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mycar_description::odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25cda7db278c70bdd54043a3be01ed45";
  }

  static const char* value(const ::mycar_description::odom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25cda7db278c70bdULL;
  static const uint64_t static_value2 = 0xd54043a3be01ed45ULL;
};

template<class ContainerAllocator>
struct DataType< ::mycar_description::odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mycar_description/odom";
  }

  static const char* value(const ::mycar_description::odom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mycar_description::odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string child_frame_id\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 qx\n"
"float64 qy\n"
"float64 qz\n"
"float64 linear_x\n"
"float64 linear_y\n"
"float64 linear_z\n"
"float64 angular_x\n"
"float64 angular_y\n"
"float64 angular_z\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mycar_description::odom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mycar_description::odom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.qx);
      stream.next(m.qy);
      stream.next(m.qz);
      stream.next(m.linear_x);
      stream.next(m.linear_y);
      stream.next(m.linear_z);
      stream.next(m.angular_x);
      stream.next(m.angular_y);
      stream.next(m.angular_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct odom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mycar_description::odom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mycar_description::odom_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "qx: ";
    Printer<double>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<double>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<double>::stream(s, indent + "  ", v.qz);
    s << indent << "linear_x: ";
    Printer<double>::stream(s, indent + "  ", v.linear_x);
    s << indent << "linear_y: ";
    Printer<double>::stream(s, indent + "  ", v.linear_y);
    s << indent << "linear_z: ";
    Printer<double>::stream(s, indent + "  ", v.linear_z);
    s << indent << "angular_x: ";
    Printer<double>::stream(s, indent + "  ", v.angular_x);
    s << indent << "angular_y: ";
    Printer<double>::stream(s, indent + "  ", v.angular_y);
    s << indent << "angular_z: ";
    Printer<double>::stream(s, indent + "  ", v.angular_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYCAR_DESCRIPTION_MESSAGE_ODOM_H
